import pandas as pd
from datetime import date

def prepare_financial_data(visits_df):
    """Prepare visits data with financial period columns"""
    if visits_df.empty:
        return pd.DataFrame()
    
    # Filter for relevant visits (exclude tolerance periods)
    financial_df = visits_df[
        (visits_df['Visit'].str.startswith("✅")) |
        (visits_df['Visit'].str.startswith("❌ Screen Fail")) |
        (visits_df['Visit'].str.startswith("🔴")) |
        (visits_df['Visit'].str.contains('Visit', na=False) & (~visits_df.get('IsActual', False)))
    ].copy()

    if not financial_df.empty:
        # Add all time period columns
        financial_df['MonthYear'] = financial_df['Date'].dt.to_period('M')
        financial_df['Quarter'] = financial_df['Date'].dt.quarter
        financial_df['Year'] = financial_df['Date'].dt.year
        financial_df['QuarterYear'] = financial_df['Year'].astype(str) + '-Q' + financial_df['Quarter'].astype(str)
        financial_df['FinancialYear'] = financial_df['Date'].apply(
            lambda d: f"{d.year}-{d.year+1}" if d.month >= 4 else f"{d.year-1}-{d.year}"
        )
    
    return financial_df

def get_list_ratios():
    """Get fixed list size ratios"""
    ashfields_list_size = 28500
    kiltearn_list_size = 12500
    total_list_size = ashfields_list_size + kiltearn_list_size
    
    return {
        'ashfields': ashfields_list_size / total_list_size,
        'kiltearn': kiltearn_list_size / total_list_size,
        'ashfields_size': ashfields_list_size,
        'kiltearn_size': kiltearn_list_size
    }

def build_profit_sharing_analysis(financial_df, patients_df, weights):
    """Build complete profit sharing analysis data"""
    quarters = sorted(financial_df['QuarterYear'].unique()) if 'QuarterYear' in financial_df.columns else []
    financial_years = sorted(financial_df['FinancialYear'].unique()) if 'FinancialYear' in financial_df.columns else []
    
    # Return empty list if no data
    if not quarters and not financial_years:
        return []
    
    # Simplified version - just return basic structure for now
    return [{
        'Period': 'Test',
        'Financial Year': 2025,
        'Type': 'Quarter',
        'Ashfields Share': '50.0%',
        'Kiltearn Share': '50.0%'
    }]

def build_ratio_breakdown_data(financial_df, patients_df, period_config, weights):
    """Build ratio breakdown data for any time period"""
    # Simplified version - return empty for now
    return []

def calculate_income_realization_metrics(visits_df, trials_df, patients_df):
    """Calculate income realization and pipeline metrics"""
    # Return basic structure for now
    return {
        'completed_income': 0,
        'total_scheduled_income': 0,
        'pipeline_income': 0,
        'realization_rate': 0,
        'completed_visits_count': 0,
        'total_scheduled_visits_count': 0,
        'pipeline_visits_count': 0
    }
